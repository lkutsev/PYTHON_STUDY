# #Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству
# ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических
# операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()). Данные методы должны применяться только к клеткам и
# выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
# соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку
# : *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class cell:
    cell = 0

    def __init__(self, cell):
        self.cell = cell

    def __add__(self, x):
        return cell(self.cell + x.cell)

    def __sub__(self, x):
        if self.cell - x.cell >= 0:
            return cell(self.cell - x.cell)
        else:
            print('результат вычитания не может быть меньше нуля')
            return cell(0)

    def __mul__(self, x):
        return cell(self.cell * x.cell)

    def __truediv__(self, x):
        return cell(self.cell / x.cell)

    def make_order(self, n):
        res = ''
        m = 0
        for i in range(0, self.cell):
            res = res + '0'
            if m < n - 1:
                m += 1
            else:
                m = 0
                res = res + '\n'
        return res


a = cell(10)
b = cell(30)
z = a - b
print(z.cell)
z = a + b
print(z.cell)
z = a * b
print(z.cell)
z = a / b
print(z.cell)
print('Make_order(4):')
print(b.make_order(4))
